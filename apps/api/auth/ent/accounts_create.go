// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kohTkd/experimental_learning/ent/accounts"
)

// AccountsCreate is the builder for creating a Accounts entity.
type AccountsCreate struct {
	config
	mutation *AccountsMutation
	hooks    []Hook
}

// SetEmail sets the "email" field.
func (ac *AccountsCreate) SetEmail(s string) *AccountsCreate {
	ac.mutation.SetEmail(s)
	return ac
}

// SetPassword sets the "password" field.
func (ac *AccountsCreate) SetPassword(s string) *AccountsCreate {
	ac.mutation.SetPassword(s)
	return ac
}

// SetCreatedAt sets the "created_at" field.
func (ac *AccountsCreate) SetCreatedAt(t time.Time) *AccountsCreate {
	ac.mutation.SetCreatedAt(t)
	return ac
}

// SetUpdateAt sets the "update_at" field.
func (ac *AccountsCreate) SetUpdateAt(t time.Time) *AccountsCreate {
	ac.mutation.SetUpdateAt(t)
	return ac
}

// Mutation returns the AccountsMutation object of the builder.
func (ac *AccountsCreate) Mutation() *AccountsMutation {
	return ac.mutation
}

// Save creates the Accounts in the database.
func (ac *AccountsCreate) Save(ctx context.Context) (*Accounts, error) {
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AccountsCreate) SaveX(ctx context.Context) *Accounts {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AccountsCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AccountsCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AccountsCreate) check() error {
	if _, ok := ac.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "Accounts.email"`)}
	}
	if _, ok := ac.mutation.Password(); !ok {
		return &ValidationError{Name: "password", err: errors.New(`ent: missing required field "Accounts.password"`)}
	}
	if _, ok := ac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Accounts.created_at"`)}
	}
	if _, ok := ac.mutation.UpdateAt(); !ok {
		return &ValidationError{Name: "update_at", err: errors.New(`ent: missing required field "Accounts.update_at"`)}
	}
	return nil
}

func (ac *AccountsCreate) sqlSave(ctx context.Context) (*Accounts, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *AccountsCreate) createSpec() (*Accounts, *sqlgraph.CreateSpec) {
	var (
		_node = &Accounts{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(accounts.Table, sqlgraph.NewFieldSpec(accounts.FieldID, field.TypeInt))
	)
	if value, ok := ac.mutation.Email(); ok {
		_spec.SetField(accounts.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := ac.mutation.Password(); ok {
		_spec.SetField(accounts.FieldPassword, field.TypeString, value)
		_node.Password = value
	}
	if value, ok := ac.mutation.CreatedAt(); ok {
		_spec.SetField(accounts.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ac.mutation.UpdateAt(); ok {
		_spec.SetField(accounts.FieldUpdateAt, field.TypeTime, value)
		_node.UpdateAt = value
	}
	return _node, _spec
}

// AccountsCreateBulk is the builder for creating many Accounts entities in bulk.
type AccountsCreateBulk struct {
	config
	err      error
	builders []*AccountsCreate
}

// Save creates the Accounts entities in the database.
func (acb *AccountsCreateBulk) Save(ctx context.Context) ([]*Accounts, error) {
	if acb.err != nil {
		return nil, acb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Accounts, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AccountsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AccountsCreateBulk) SaveX(ctx context.Context) []*Accounts {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AccountsCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AccountsCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}
