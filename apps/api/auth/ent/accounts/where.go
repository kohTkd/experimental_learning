// Code generated by ent, DO NOT EDIT.

package accounts

import (
	"entgo.io/ent/dialect/sql"
	"github.com/kohTkd/experimental_learning/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Accounts {
	return predicate.Accounts(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Accounts {
	return predicate.Accounts(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Accounts {
	return predicate.Accounts(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Accounts {
	return predicate.Accounts(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Accounts {
	return predicate.Accounts(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Accounts {
	return predicate.Accounts(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Accounts {
	return predicate.Accounts(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Accounts {
	return predicate.Accounts(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Accounts {
	return predicate.Accounts(sql.FieldLTE(FieldID, id))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.Accounts {
	return predicate.Accounts(sql.FieldEQ(FieldEmail, v))
}

// AccountType applies equality check predicate on the "account_type" field. It's identical to AccountTypeEQ.
func AccountType(v int) predicate.Accounts {
	return predicate.Accounts(sql.FieldEQ(FieldAccountType, v))
}

// Password applies equality check predicate on the "password" field. It's identical to PasswordEQ.
func Password(v string) predicate.Accounts {
	return predicate.Accounts(sql.FieldEQ(FieldPassword, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.Accounts {
	return predicate.Accounts(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.Accounts {
	return predicate.Accounts(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.Accounts {
	return predicate.Accounts(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.Accounts {
	return predicate.Accounts(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.Accounts {
	return predicate.Accounts(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.Accounts {
	return predicate.Accounts(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.Accounts {
	return predicate.Accounts(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.Accounts {
	return predicate.Accounts(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.Accounts {
	return predicate.Accounts(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.Accounts {
	return predicate.Accounts(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.Accounts {
	return predicate.Accounts(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.Accounts {
	return predicate.Accounts(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.Accounts {
	return predicate.Accounts(sql.FieldContainsFold(FieldEmail, v))
}

// AccountTypeEQ applies the EQ predicate on the "account_type" field.
func AccountTypeEQ(v int) predicate.Accounts {
	return predicate.Accounts(sql.FieldEQ(FieldAccountType, v))
}

// AccountTypeNEQ applies the NEQ predicate on the "account_type" field.
func AccountTypeNEQ(v int) predicate.Accounts {
	return predicate.Accounts(sql.FieldNEQ(FieldAccountType, v))
}

// AccountTypeIn applies the In predicate on the "account_type" field.
func AccountTypeIn(vs ...int) predicate.Accounts {
	return predicate.Accounts(sql.FieldIn(FieldAccountType, vs...))
}

// AccountTypeNotIn applies the NotIn predicate on the "account_type" field.
func AccountTypeNotIn(vs ...int) predicate.Accounts {
	return predicate.Accounts(sql.FieldNotIn(FieldAccountType, vs...))
}

// AccountTypeGT applies the GT predicate on the "account_type" field.
func AccountTypeGT(v int) predicate.Accounts {
	return predicate.Accounts(sql.FieldGT(FieldAccountType, v))
}

// AccountTypeGTE applies the GTE predicate on the "account_type" field.
func AccountTypeGTE(v int) predicate.Accounts {
	return predicate.Accounts(sql.FieldGTE(FieldAccountType, v))
}

// AccountTypeLT applies the LT predicate on the "account_type" field.
func AccountTypeLT(v int) predicate.Accounts {
	return predicate.Accounts(sql.FieldLT(FieldAccountType, v))
}

// AccountTypeLTE applies the LTE predicate on the "account_type" field.
func AccountTypeLTE(v int) predicate.Accounts {
	return predicate.Accounts(sql.FieldLTE(FieldAccountType, v))
}

// PasswordEQ applies the EQ predicate on the "password" field.
func PasswordEQ(v string) predicate.Accounts {
	return predicate.Accounts(sql.FieldEQ(FieldPassword, v))
}

// PasswordNEQ applies the NEQ predicate on the "password" field.
func PasswordNEQ(v string) predicate.Accounts {
	return predicate.Accounts(sql.FieldNEQ(FieldPassword, v))
}

// PasswordIn applies the In predicate on the "password" field.
func PasswordIn(vs ...string) predicate.Accounts {
	return predicate.Accounts(sql.FieldIn(FieldPassword, vs...))
}

// PasswordNotIn applies the NotIn predicate on the "password" field.
func PasswordNotIn(vs ...string) predicate.Accounts {
	return predicate.Accounts(sql.FieldNotIn(FieldPassword, vs...))
}

// PasswordGT applies the GT predicate on the "password" field.
func PasswordGT(v string) predicate.Accounts {
	return predicate.Accounts(sql.FieldGT(FieldPassword, v))
}

// PasswordGTE applies the GTE predicate on the "password" field.
func PasswordGTE(v string) predicate.Accounts {
	return predicate.Accounts(sql.FieldGTE(FieldPassword, v))
}

// PasswordLT applies the LT predicate on the "password" field.
func PasswordLT(v string) predicate.Accounts {
	return predicate.Accounts(sql.FieldLT(FieldPassword, v))
}

// PasswordLTE applies the LTE predicate on the "password" field.
func PasswordLTE(v string) predicate.Accounts {
	return predicate.Accounts(sql.FieldLTE(FieldPassword, v))
}

// PasswordContains applies the Contains predicate on the "password" field.
func PasswordContains(v string) predicate.Accounts {
	return predicate.Accounts(sql.FieldContains(FieldPassword, v))
}

// PasswordHasPrefix applies the HasPrefix predicate on the "password" field.
func PasswordHasPrefix(v string) predicate.Accounts {
	return predicate.Accounts(sql.FieldHasPrefix(FieldPassword, v))
}

// PasswordHasSuffix applies the HasSuffix predicate on the "password" field.
func PasswordHasSuffix(v string) predicate.Accounts {
	return predicate.Accounts(sql.FieldHasSuffix(FieldPassword, v))
}

// PasswordEqualFold applies the EqualFold predicate on the "password" field.
func PasswordEqualFold(v string) predicate.Accounts {
	return predicate.Accounts(sql.FieldEqualFold(FieldPassword, v))
}

// PasswordContainsFold applies the ContainsFold predicate on the "password" field.
func PasswordContainsFold(v string) predicate.Accounts {
	return predicate.Accounts(sql.FieldContainsFold(FieldPassword, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Accounts) predicate.Accounts {
	return predicate.Accounts(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Accounts) predicate.Accounts {
	return predicate.Accounts(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Accounts) predicate.Accounts {
	return predicate.Accounts(sql.NotPredicates(p))
}
