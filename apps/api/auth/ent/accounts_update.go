// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kohTkd/experimental_learning/ent/accounts"
	"github.com/kohTkd/experimental_learning/ent/predicate"
)

// AccountsUpdate is the builder for updating Accounts entities.
type AccountsUpdate struct {
	config
	hooks    []Hook
	mutation *AccountsMutation
}

// Where appends a list predicates to the AccountsUpdate builder.
func (au *AccountsUpdate) Where(ps ...predicate.Accounts) *AccountsUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetEmail sets the "email" field.
func (au *AccountsUpdate) SetEmail(s string) *AccountsUpdate {
	au.mutation.SetEmail(s)
	return au
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (au *AccountsUpdate) SetNillableEmail(s *string) *AccountsUpdate {
	if s != nil {
		au.SetEmail(*s)
	}
	return au
}

// SetAccountType sets the "account_type" field.
func (au *AccountsUpdate) SetAccountType(i int) *AccountsUpdate {
	au.mutation.ResetAccountType()
	au.mutation.SetAccountType(i)
	return au
}

// SetNillableAccountType sets the "account_type" field if the given value is not nil.
func (au *AccountsUpdate) SetNillableAccountType(i *int) *AccountsUpdate {
	if i != nil {
		au.SetAccountType(*i)
	}
	return au
}

// AddAccountType adds i to the "account_type" field.
func (au *AccountsUpdate) AddAccountType(i int) *AccountsUpdate {
	au.mutation.AddAccountType(i)
	return au
}

// SetPassword sets the "password" field.
func (au *AccountsUpdate) SetPassword(s string) *AccountsUpdate {
	au.mutation.SetPassword(s)
	return au
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (au *AccountsUpdate) SetNillablePassword(s *string) *AccountsUpdate {
	if s != nil {
		au.SetPassword(*s)
	}
	return au
}

// Mutation returns the AccountsMutation object of the builder.
func (au *AccountsUpdate) Mutation() *AccountsMutation {
	return au.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AccountsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AccountsUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AccountsUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AccountsUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

func (au *AccountsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(accounts.Table, accounts.Columns, sqlgraph.NewFieldSpec(accounts.FieldID, field.TypeInt))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.Email(); ok {
		_spec.SetField(accounts.FieldEmail, field.TypeString, value)
	}
	if value, ok := au.mutation.AccountType(); ok {
		_spec.SetField(accounts.FieldAccountType, field.TypeInt, value)
	}
	if value, ok := au.mutation.AddedAccountType(); ok {
		_spec.AddField(accounts.FieldAccountType, field.TypeInt, value)
	}
	if value, ok := au.mutation.Password(); ok {
		_spec.SetField(accounts.FieldPassword, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{accounts.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AccountsUpdateOne is the builder for updating a single Accounts entity.
type AccountsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AccountsMutation
}

// SetEmail sets the "email" field.
func (auo *AccountsUpdateOne) SetEmail(s string) *AccountsUpdateOne {
	auo.mutation.SetEmail(s)
	return auo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (auo *AccountsUpdateOne) SetNillableEmail(s *string) *AccountsUpdateOne {
	if s != nil {
		auo.SetEmail(*s)
	}
	return auo
}

// SetAccountType sets the "account_type" field.
func (auo *AccountsUpdateOne) SetAccountType(i int) *AccountsUpdateOne {
	auo.mutation.ResetAccountType()
	auo.mutation.SetAccountType(i)
	return auo
}

// SetNillableAccountType sets the "account_type" field if the given value is not nil.
func (auo *AccountsUpdateOne) SetNillableAccountType(i *int) *AccountsUpdateOne {
	if i != nil {
		auo.SetAccountType(*i)
	}
	return auo
}

// AddAccountType adds i to the "account_type" field.
func (auo *AccountsUpdateOne) AddAccountType(i int) *AccountsUpdateOne {
	auo.mutation.AddAccountType(i)
	return auo
}

// SetPassword sets the "password" field.
func (auo *AccountsUpdateOne) SetPassword(s string) *AccountsUpdateOne {
	auo.mutation.SetPassword(s)
	return auo
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (auo *AccountsUpdateOne) SetNillablePassword(s *string) *AccountsUpdateOne {
	if s != nil {
		auo.SetPassword(*s)
	}
	return auo
}

// Mutation returns the AccountsMutation object of the builder.
func (auo *AccountsUpdateOne) Mutation() *AccountsMutation {
	return auo.mutation
}

// Where appends a list predicates to the AccountsUpdate builder.
func (auo *AccountsUpdateOne) Where(ps ...predicate.Accounts) *AccountsUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AccountsUpdateOne) Select(field string, fields ...string) *AccountsUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Accounts entity.
func (auo *AccountsUpdateOne) Save(ctx context.Context) (*Accounts, error) {
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AccountsUpdateOne) SaveX(ctx context.Context) *Accounts {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AccountsUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AccountsUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (auo *AccountsUpdateOne) sqlSave(ctx context.Context) (_node *Accounts, err error) {
	_spec := sqlgraph.NewUpdateSpec(accounts.Table, accounts.Columns, sqlgraph.NewFieldSpec(accounts.FieldID, field.TypeInt))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Accounts.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, accounts.FieldID)
		for _, f := range fields {
			if !accounts.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != accounts.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.Email(); ok {
		_spec.SetField(accounts.FieldEmail, field.TypeString, value)
	}
	if value, ok := auo.mutation.AccountType(); ok {
		_spec.SetField(accounts.FieldAccountType, field.TypeInt, value)
	}
	if value, ok := auo.mutation.AddedAccountType(); ok {
		_spec.AddField(accounts.FieldAccountType, field.TypeInt, value)
	}
	if value, ok := auo.mutation.Password(); ok {
		_spec.SetField(accounts.FieldPassword, field.TypeString, value)
	}
	_node = &Accounts{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{accounts.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
